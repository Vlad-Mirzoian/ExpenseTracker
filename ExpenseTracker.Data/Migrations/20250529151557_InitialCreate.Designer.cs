// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpenseTracker.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250529151557_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("boolean");

                    b.Property<string>("MccCodes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1b15d7e-0b6f-4d19-9d8c-b0c8722277d0"),
                            IsBuiltIn = true,
                            MccCodes = "[5814,5812,5462]",
                            Name = "Кафе/ресторани"
                        },
                        new
                        {
                            Id = new Guid("a25a42f4-88b3-4006-b0c3-2c7a15a358e7"),
                            IsBuiltIn = true,
                            MccCodes = "[5411,5499]",
                            Name = "Супермаркети"
                        },
                        new
                        {
                            Id = new Guid("ad42b743-ef9a-43e5-b71f-97a742ae1a85"),
                            IsBuiltIn = true,
                            MccCodes = "[5651]",
                            Name = "Магазини одягу"
                        },
                        new
                        {
                            Id = new Guid("61e1f6c7-7b85-47d1-bb9a-d78f911e8cd3"),
                            IsBuiltIn = true,
                            MccCodes = "[5541]",
                            Name = "АЗС"
                        },
                        new
                        {
                            Id = new Guid("db60d0b9-89e6-4694-9295-56b688254a2f"),
                            IsBuiltIn = true,
                            MccCodes = "[6011]",
                            Name = "Банки"
                        },
                        new
                        {
                            Id = new Guid("1a12c08c-f9eb-4f29-8480-ef05137e0cf5"),
                            IsBuiltIn = true,
                            MccCodes = "[5912]",
                            Name = "Аптеки"
                        },
                        new
                        {
                            Id = new Guid("d177f3d7-d5d2-4d97-bd9e-45f54e2e268f"),
                            IsBuiltIn = true,
                            MccCodes = "[7011]",
                            Name = "Готелі"
                        },
                        new
                        {
                            Id = new Guid("b50ee9f0-3480-40d8-bb48-e15bf9e2fc03"),
                            IsBuiltIn = true,
                            MccCodes = "[5811,8999]",
                            Name = "Доставка"
                        },
                        new
                        {
                            Id = new Guid("2afd336a-03b8-4f17-8cfe-2c0e93cb4c49"),
                            IsBuiltIn = true,
                            MccCodes = "[4829]",
                            Name = "Зняття/Відправка"
                        },
                        new
                        {
                            Id = new Guid("cf668835-71a2-4868-87b8-3938ac9dabf9"),
                            IsBuiltIn = true,
                            MccCodes = "[4900]",
                            Name = "Комуналка"
                        },
                        new
                        {
                            Id = new Guid("86cdeb09-ae28-4a8f-9006-24ce4c44419f"),
                            IsBuiltIn = true,
                            MccCodes = "[6012]",
                            Name = "Надходження"
                        },
                        new
                        {
                            Id = new Guid("74d258ea-bf82-4934-bb9a-8a343d9da1ea"),
                            IsBuiltIn = true,
                            MccCodes = "[7832]",
                            Name = "Кінотеатри"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            IsBuiltIn = true,
                            MccCodes = "[0]",
                            Name = "Інше"
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Data.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsManuallyCategorized")
                        .HasColumnType("boolean");

                    b.Property<int?>("MccCode")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.HasOne("Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
