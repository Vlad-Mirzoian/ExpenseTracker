@page
@model ExpenseTracker.Web.Pages.MainPageModel

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Трекер витрат</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-brand">Трекер витрат</div>
        <button class="navbar-toggle" aria-label="Відкрити меню" onclick="toggleSidebar()">
            <i class="fas fa-bars"></i>
        </button>
        <div class="navbar-actions">
            <form method="post" action="?handler=Logout">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-secondary">Вийти</button>
            </form>
        </div>
    </nav>

    <div class="grid-container">
        <aside class="sidebar">
            <div class="user-info">
                <img src="/img/avatar.jpg" alt="Аватар користувача" class="user-avatar">
                <p class="user-name">Привіт, @(Model.UserInformation?.Login ?? "Гість")</p>
            </div>
            <h3>Категорії</h3>
            <ul class="categories">
                <li>
                    <form method="get" action="/MainPage">
                        <button type="submit" class="category-btn">Усі</button>
                    </form>
                </li>
                @foreach (var category in Model.Categories)
                {
                    <li>
                        <div class="category-buttons">
                            <form method="get" action="/MainPage">
                                <input type="hidden" name="id" value="@category.Id" />
                                <input type="hidden" name="pageNumber" value="1" />
                                <button type="submit" class="category-btn" aria-label="Показати транзакції для @category.Name">@category.Name</button>
                            </form>
                        </div>
                    </li>
                }
                <li>
                    <button class="btn btn-primary toggle-create-category" onclick="toggleCreateCategoryForm()" aria-label="Показати форму створення категорії">
                        Створити нову категорію
                    </button>
                    <form method="post" action="?handler=CreateCategory" class="create-category-form" style="display: none;">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label for="NewCategoryName">Назва:</label>
                            <input type="text" id="NewCategoryName" name="NewCategoryName" class="form-control" required aria-required="true" />
                        </div>
                        <div class="form-group">
                            <label for="BaseCategoryIds">Базові категорії:</label>
                            <select id="BaseCategoryIds" name="BaseCategoryIds" multiple class="form-control" aria-label="Виберіть базові категорії">
                                @foreach (var category in Model.Categories.Where(c => c.IsBuiltIn))
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Створити</button>
                    </form>
                    @if (!string.IsNullOrEmpty(Model.ModelError))
                    {
                        <p class="error">@Model.ModelError</p>
                    }
                </li>
            </ul>
        </aside>

        <main class="content">
            <h2>Огляд фінансів</h2>
            <div class="chart-cards">
                @if (Request.Query.ContainsKey("id"))
                {
                    @if (Model.ExpenseDescriptionChartData.Any() && Model.ExpenseDescriptionChartData.Any(d => d.TotalAmount != 0))
                    {
                        <div class="chart-card">
                            <h3>Витрати за описом</h3>
                            <canvas id="expenseDescriptionChart"></canvas>
                        </div>
                    }
                    @if (Model.IncomeDescriptionChartData.Any() && Model.IncomeDescriptionChartData.Any(d => d.TotalAmount != 0))
                    {
                        <div class="chart-card">
                            <h3>Надходження за описом</h3>
                            <canvas id="incomeDescriptionChart"></canvas>
                        </div>
                    }
                    @if (!Model.ExpenseDescriptionChartData.Any(d => d.TotalAmount != 0) && !Model.IncomeDescriptionChartData.Any(d => d.TotalAmount != 0))
                    {
                        <p>Дані для графіків за описом відсутні.</p>
                    }
                }
                else
                {
                    @if (Model.CategorySpending.Any() && Model.CategorySpending.Any(d => d.TotalAmount != 0))
                    {
                        <div class="chart-card">
                            <h3>Витрати за базовими категоріями</h3>
                            <canvas id="expenseChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <p>Дані для графіку витрат відсутні.</p>
                    }
                    @if (Model.IncomeByCategory.Any() && Model.IncomeByCategory.Any(d => d.TotalAmount != 0))
                    {
                        <div class="chart-card">
                            <h3>Надходження за базовими категоріями</h3>
                            <canvas id="incomeChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <p>Дані для графіку надходжень відсутні.</p>
                    }
                }
            </div>
            @if (Request.Query.ContainsKey("id"))
            {
                <div class="transaction-list">
                    <h3>Транзакції (Сторінка @Model.PageNumber)</h3>
                    @if (!Model.Transactions.Any())
                    {
                        <p>Транзакції відсутні.</p>
                    }
                    else
                    {
                        @foreach (var transaction in Model.Transactions)
                        {
                            <div class="transaction-card">
                                <div class="transaction-icon">
                                    <i class="fas fa-money-bill-wave"></i>
                                </div>
                                <div class="transaction-details">
                                    <p><strong>@transaction.Description</strong></p>
                                    <p>@transaction.Amount.ToString("F2") грн</p>
                                    <p>@transaction.Date.ToString("dd.MM.yyyy")</p>
                                    <p>Категорії: @string.Join(", ", transaction.TransactionCategories.Select(tc => tc.CategoryName + (tc.IsBaseCategory ? " (Базова)" : "")))</p>
                                    <form method="post" action="?handler=UpdateTransactionCategory&pageNumber=@Model.PageNumber">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="TransactionId" value="@transaction.Id" />
                                        <select name="CategoryId" onchange="this.form.submit()" aria-label="Виберіть нову категорію для транзакції">
                                            @foreach (var category in Model.Categories.Where(c => c.IsBuiltIn))
                                            {
                                                <option value="@category.Id" @(category.Id == transaction.CategoryId ? "selected" : "")>@category.Name</option>
                                            }
                                        </select>
                                    </form>
                                </div>
                            </div>
                        }
                        @if (Model.HasMoreTransactions)
                        {
                            <div class="load-more">
                                <a href="/MainPage?id=@Request.Query["id"]&pageNumber=@(Model.PageNumber + 1)" class="btn btn-primary" aria-label="Завантажити ще">Завантажити ще</a>
                            </div>
                        }
                        else
                        {
                            <p class="no-more">Більше транзакцій немає.</p>
                        }
                    }
                    @if (!string.IsNullOrEmpty(Model.ModelError))
                    {
                        <p class="error">@Model.ModelError</p>
                    }
                </div>
            }
            else
            {
                <div class="category-list">
                    <h3>Витрати</h3>
                    @foreach (var item in Model.CategorySpending)
                    {
                        <div class="category-card @(item.IsBuiltIn ? "" : "user-created")">
                            <div class="category-icon">
                                <i class="fas fa-tags"></i>
                            </div>
                            <div class="category-details">
                                <p>
                                    <strong>@item.CategoryName</strong>
                                    @if (!item.IsBuiltIn)
                                    {
                                        <span class="user-created-badge">Користувацька</span>
                                    }
                                </p>
                                <p>@item.TotalAmount.ToString("F2") грн</p>
                                <p>@item.Percentage.ToString("F1")% від загальних витрат</p>
                            </div>
                        </div>
                    }
                    <h3>Надходження</h3>
                    @foreach (var item in Model.IncomeByCategory)
                    {
                        <div class="category-card @(item.IsBuiltIn ? "" : "user-created")">
                            <div class="category-icon">
                                <i class="fas fa-money-check-alt"></i>
                            </div>
                            <div class="category-details">
                                <p>
                                    <strong>@item.CategoryName</strong>
                                    @if (!item.IsBuiltIn)
                                    {
                                        <span class="user-created-badge">Користувацька</span>
                                    }
                                </p>
                                <p>@item.TotalAmount.ToString("F2") грн</p>
                                <p>@item.Percentage.ToString("F1")% від загальних надходжень</p>
                            </div>
                        </div>
                    }
                </div>
            }
        </main>
    </div>

    <script>
        function toggleSidebar() {
            document.querySelector('.sidebar').classList.toggle('active');
        }

        function toggleCreateCategoryForm() {
            const form = document.querySelector('.create-category-form');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }

        document.addEventListener('DOMContentLoaded', function () {
            const isCategorySelected = '@Request.Query.ContainsKey("id")' === 'True';

            if (isCategorySelected) {
                const expenseDescLabels = @Html.Raw(Json.Serialize(Model.ExpenseDescriptionChartData.Select(t => t.Description)));
                const expenseDescAmounts = @Html.Raw(Json.Serialize(Model.ExpenseDescriptionChartData.Select(t => t.TotalAmount)));
                const expenseDescCtx = document.getElementById('expenseDescriptionChart');
                if (expenseDescCtx && expenseDescAmounts.some(amount => amount !== 0)) {
                    new Chart(expenseDescCtx.getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: expenseDescLabels,
                            datasets: [{
                                label: 'Витрати за описом',
                                data: expenseDescAmounts,
                                backgroundColor: ['#e53e3e', '#38b2ac', '#805ad5', '#f6e05e', '#48bb78', '#ed8936', '#3182ce', '#38a169', '#d53f8c', '#b794f4'],
                                hoverOffset: 12
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'bottom' },
                                tooltip: {
                                    callbacks: {
                                        label: function (tooltipItem) {
                                            return tooltipItem.label + ': ' + tooltipItem.raw + ' грн';
                                        }
                                    }
                                }
                            }
                        }
                    });
                }

                const incomeDescLabels = @Html.Raw(Json.Serialize(Model.IncomeDescriptionChartData.Select(t => t.Description)));
                const incomeDescAmounts = @Html.Raw(Json.Serialize(Model.IncomeDescriptionChartData.Select(t => t.TotalAmount)));
                const incomeDescCtx = document.getElementById('incomeDescriptionChart');
                if (incomeDescCtx && incomeDescAmounts.some(amount => amount !== 0)) {
                    new Chart(incomeDescCtx.getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: incomeDescLabels,
                            datasets: [{
                                label: 'Надходження за описом',
                                data: incomeDescAmounts,
                                backgroundColor: ['#3182ce', '#38a169', '#d53f8c', '#ed8936', '#48bb78', '#b794f4'],
                                hoverOffset: 12
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'bottom' },
                                tooltip: {
                                    callbacks: {
                                        label: function (tooltipItem) {
                                            return tooltipItem.label + ': ' + tooltipItem.raw + ' грн';
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            } else {
                const expenseLabels = @Html.Raw(Json.Serialize(Model.CategorySpending.Select(t => t.CategoryName)));
                const expenseAmounts = @Html.Raw(Json.Serialize(Model.CategorySpending.Select(t => t.TotalAmount)));
                const expenseCtx = document.getElementById('expenseChart');
                if (expenseCtx && expenseAmounts.some(amount => amount !== 0)) {
                    new Chart(expenseCtx.getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: expenseLabels,
                            datasets: [{
                                label: 'Витрати',
                                data: expenseAmounts,
                                backgroundColor: ['#e53e3e', '#38b2ac', '#805ad5', '#f6e05e', '#48bb78', '#ed8936'],
                                hoverOffset: 12
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'bottom' },
                                tooltip: {
                                    callbacks: {
                                        label: function (tooltipItem) {
                                            return tooltipItem.label + ': ' + tooltipItem.raw + ' грн';
                                        }
                                    }
                                }
                            }
                        }
                    });
                }

                const incomeLabels = @Html.Raw(Json.Serialize(Model.IncomeByCategory.Select(t => t.CategoryName)));
                const incomeAmounts = @Html.Raw(Json.Serialize(Model.IncomeByCategory.Select(t => t.TotalAmount)));
                const incomeCtx = document.getElementById('incomeChart');
                if (incomeCtx && incomeAmounts.some(amount => amount !== 0)) {
                    new Chart(incomeCtx.getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: incomeLabels,
                            datasets: [{
                                label: 'Надходження',
                                data: incomeAmounts,
                                backgroundColor: ['#3182ce', '#38a169', '#d53f8c', '#ed8936', '#48bb78', '#b794f4'],
                                hoverOffset: 12
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'top' },
                                tooltip: {
                                    callbacks: {
                                        label: function (tooltipItem) {
                                            return tooltipItem.label + ': ' + tooltipItem.raw + ' грн';
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            }
        });
    </script>
</body>
</html>